# IMPORTANT: SET A SECRET PASSWORD in Postgres for the Discourse User
# TODO: change SOME_SECRET in this template

templates:
  - "templates/sshd.template.yml"
  - "templates/web.template.yml"
  - "templates/web.ratelimited.template.yml"

expose:
  - "{{item.http_port}}:80"
  - "{{item.ssh_port}}:22"

params:
  ## Which Git revision should this container use? (default: tests-passed)
  #version: tests-passed

env:
  LANG: en_US.UTF-8
  ## TODO: How many concurrent web requests are supported?
  ## With 2GB we recommend 3-4 workers, with 1GB only 2
  #UNICORN_WORKERS: 3

  ## TODO: configure connectivity to the databases
  DISCOURSE_DB_SOCKET: ''
  DISCOURSE_DB_USERNAME: "{{item.DISCOURSE_DB_USERNAME}}"
  DISCOURSE_DB_PASSWORD: "{{item.DISCOURSE_DB_PASSWORD}}"
  DISCOURSE_DB_NAME: "{{item.DISCOURSE_DB_NAME}}"
  DISCOURSE_DB_HOST: "{{item.DISCOURSE_DB_HOST}}"
  DISCOURSE_REDIS_HOST: "{{item.DISCOURSE_REDIS_HOST}}"
  ##
  ## TODO: List of comma delimited emails that will be made admin and developer
  ## on initial signup example 'user1@example.com,user2@example.com'
  DISCOURSE_DEVELOPER_EMAILS: "{{item.DISCOURSE_DEVELOPER_EMAILS}}"
  ##
  ## TODO: The domain name this Discourse instance will respond to
  DISCOURSE_HOSTNAME: "{{item.DISCOURSE_HOSTNAME}}"
  ##
  ## TODO: The mailserver this Discourse instance will use
  DISCOURSE_SMTP_ADDRESS: "{{item.DISCOURSE_SMTP_ADDRESS}}"         # (mandatory)
  DISCOURSE_SMTP_PORT: "{{item.DISCOURSE_SMTP_PORT}}"                        # (optional)
  DISCOURSE_SMTP_USER_NAME: "{{item.DISCOURSE_SMTP_USER_NAME}}"      # (optional)
  DISCOURSE_SMTP_PASSWORD: "{{item.DISCOURSE_SMTP_PASSWORD}}"               # (optional)
  ##
  ## The CDN address for this Discourse instance (configured to pull)
  #DISCOURSE_CDN_URL: //discourse-cdn.example.com
  {% for item in item.extra_vars -%}
  {{ item }}

  {% endfor %}

volumes:
  - volume:
      host: /var/discourse/shared/web-only
      guest: /shared
  - volume:
      host: /var/discourse/shared/web-only/log/var-log
      guest: /var/log

#Use 'links' key to link containers together, aka use Docker --link flag.
#links:
#  - link:
#      name: data
#      alias: data

## The docker manager plugin allows you to one-click upgrade Discouse
## http://discourse.example.com/admin/docker
hooks:
  after_code:
    - exec:
        cd: $home/plugins
        cmd:
          - mkdir -p plugins
          - git clone https://github.com/discourse/docker_manager.git
          {% for item in item.extra_plugins %}
          - git clone {{ item }}
          {% endfor %}

## Remember, this is YAML syntax - you can only have one block with a name
run:
  - exec: echo "Beginning of custom commands"
  - replace:
      filename: "/etc/nginx/conf.d/discourse.conf"
      from: "server {"
      to: |
        server {
        #Messy hack to force SSL on only the hostname, not IPs so ELB and Icinga work.
        set $use_https NO;
        if ($host ~* '{{ item.DISCOURSE_HOSTNAME }}') {
            set $use_https A;
        }
        if ($http_x_forwarded_proto != 'https') {
            set $use_https "${use_https}B";
        }
        if ($use_https = AB) {
            return 301 https://$host$request_uri;
        }

  ## If you want to configure password login for root, uncomment and change:
  ## Use only one of the following lines:
  #- exec: /usr/sbin/usermod -p 'PASSWORD_HASH' root
  #- exec: /usr/sbin/usermod -p "$(mkpasswd -m sha-256 'RAW_PASSWORD')" root

  ## If you want to authorized additional users, uncomment and change:
  #- exec: ssh-import-id username
  #- exec: ssh-import-id anotherusername

  - exec: echo "End of custom commands"
  - exec: awk -F\# '{print $1;}' ~/.ssh/authorized_keys | awk 'BEGIN { print "Authorized SSH keys for this container:"; } NF>=2 {print $NF;}'
